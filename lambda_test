import unittest
from unittest.mock import patch, MagicMock
from botocore.stub import Stubber
import json
from botocore.exceptions import ClientError
import my_module  # Replace with the actual module name where the functions are defined

class TestMyModuleWithStubber(unittest.TestCase):

    @patch('my_module.boto3.client')
    def test_get_boto_clients_emr(self, mock_boto_client):
        emr_client = boto3.client('emr')
        mock_boto_client.return_value = emr_client
        
        with Stubber(emr_client) as stubber:
            stubber.add_response('list_clusters', {'Clusters': []})
            
            client = my_module.get_boto_clients('emr_client')
            response = client.list_clusters()
            
            self.assertEqual(response['Clusters'], [])

    @patch('my_module.boto3.client')
    def test_invoke_step_function_success(self, mock_boto_client):
        sf_client = boto3.client('stepfunctions')
        mock_boto_client.return_value = sf_client
        
        with Stubber(sf_client) as stubber:
            step_function_input = json.dumps({
                "job_name": "test_job",
                "snapshot_date": "2023-01-01",
                "job_version": "1"
            })
            expected_response = {
                "executionArn": "test_arn",
                "startDate": "2023-01-01"
            }
            stubber.add_response('start_execution', expected_response)
            
            response = my_module.invoke_step_function(
                'arn:aws:states:us-east-1:123456789012:stateMachine:TestStateMachine', 
                step_function_input
            )
            
            self.assertEqual(response, expected_response)

    @patch('my_module.boto3.client')
    def test_check_emr_step_status_success(self, mock_boto_client):
        emr_client = boto3.client('emr')
        mock_boto_client.return_value = emr_client
        
        with Stubber(emr_client) as stubber:
            expected_response = {
                "Step": {
                    "Status": {
                        "State": "COMPLETED"
                    }
                }
            }
            stubber.add_response('describe_step', expected_response)
            
            response = my_module.check_emr_step_status('step_id', 'cluster_id')
            
            self.assertEqual(response, expected_response)

    @patch('my_module.boto3.client')
    def test_get_spark_conf_success(self, mock_boto_client):
        s3_client = boto3.client('s3')
        mock_boto_client.return_value = s3_client
        
        with Stubber(s3_client) as stubber:
            spark_conf = {"spark_conf": ["conf1", "conf2"]}
            expected_response = {
                "Body": MagicMock(read=MagicMock(return_value=json.dumps(spark_conf).encode('utf-8')))
            }
            stubber.add_response('get_object', expected_response)
            
            response = my_module.get_spark_conf('dataset_name', 'bucket', 'key')
            
            self.assertEqual(response, ["conf1", "conf2"])

    @patch('my_module.boto3.client')
    def test_get_cluster_id_success(self, mock_boto_client):
        emr_client = boto3.client('emr')
        mock_boto_client.return_value = emr_client
        
        with Stubber(emr_client) as stubber:
            clusters = {
                "Clusters": [
                    {"Id": "cluster_id_1", "Name": "cluster_name"},
                    {"Id": "cluster_id_2", "Name": "another_cluster_name"}
                ]
            }
            stubber.add_response('list_clusters', clusters)
            
            response = my_module.get_cluster_id('cluster_name')
            
            self.assertEqual(response, "cluster_id_1")

if __name__ == '__main__':
    unittest.main()
