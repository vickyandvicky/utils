import unittest
from unittest.mock import patch, MagicMock
from botocore.stub import Stubber
import boto3
import json
from botocore.exceptions import ClientError
import handler  # Replace with the actual module name where the functions are defined

class TestHandlerWithStubber(unittest.TestCase):

    def test_get_boto_clients(self):
        with patch('handler.boto3.client') as mock_boto_client:
            # Mock boto3 clients
            emr_client = boto3.client('emr')
            s3_client = boto3.client('s3')
            sf_client = boto3.client('stepfunctions')

            mock_boto_client.side_effect = [emr_client, s3_client, sf_client]

            # Test emr_client
            client = handler.get_boto_clients('emr_client')
            self.assertEqual(client, emr_client)

            # Test s3_client
            client = handler.get_boto_clients('s3_client')
            self.assertEqual(client, s3_client)

            # Test sf_client
            client = handler.get_boto_clients('sf_client')
            self.assertEqual(client, sf_client)

    def test_invoke_step_function(self):
        sf_client = boto3.client('stepfunctions')

        with Stubber(sf_client) as stubber:
            step_function_input = json.dumps({
                "job_name": "test_job",
                "snapshot_date": "2023-01-01",
                "job_version": "1"
            })
            expected_response = {
                "executionArn": "test_arn",
                "startDate": "2023-01-01"
            }
            stubber.add_response('start_execution', expected_response)

            with patch('handler.get_boto_clients', return_value=sf_client):
                response = handler.invoke_step_function(
                    'arn:aws:states:us-east-1:123456789012:stateMachine:TestStateMachine', 
                    step_function_input
                )

                self.assertEqual(response, expected_response)

    def test_check_emr_step_status(self):
        emr_client = boto3.client('emr')

        with Stubber(emr_client) as stubber:
            expected_response = {
                "Step": {
                    "Status": {
                        "State": "COMPLETED"
                    }
                }
            }
            stubber.add_response('describe_step', expected_response)

            with patch('handler.get_boto_clients', return_value=emr_client):
                response = handler.check_emr_step_status('step_id', 'cluster_id')

                self.assertEqual(response, expected_response)

    def test_get_spark_conf(self):
        s3_client = boto3.client('s3')

        with Stubber(s3_client) as stubber:
            spark_conf = {"spark_conf": ["conf1", "conf2"]}
            expected_response = {
                "Body": MagicMock(read=MagicMock(return_value=json.dumps(spark_conf).encode('utf-8')))
            }
            stubber.add_response('get_object', expected_response)

            with patch('handler.get_boto_clients', return_value=s3_client):
                response = handler.get_spark_conf('dataset_name', 'bucket', 'key')

                self.assertEqual(response, ["conf1", "conf2"])

    def test_get_cluster_id(self):
        emr_client = boto3.client('emr')

        with Stubber(emr_client) as stubber:
            clusters = {
                "Clusters": [
                    {"Id": "cluster_id_1", "Name": "cluster_name"},
                    {"Id": "cluster_id_2", "Name": "another_cluster_name"}
                ]
            }
            stubber.add_response('list_clusters', clusters)

            with patch('handler.get_boto_clients', return_value=emr_client):
                response = handler.get_cluster_id('cluster_name')

                self.assertEqual(response, "cluster_id_1")

    def test_get_cluster_status(self):
        emr_client = boto3.client('emr')

        with Stubber(emr_client) as stubber:
            cluster_status = {
                "Cluster": {
                    "Status": {
                        "State": "RUNNING"
                    }
                }
            }
            stubber.add_response('describe_cluster', cluster_status)

            with patch('handler.get_boto_clients', return_value=emr_client):
                response = handler.get_cluster_status('cluster_id')

                self.assertEqual(response, "RUNNING")

@patch('handler.get_cluster_id')
    @patch('handler.get_spark_conf')
    @patch('handler.get_boto_clients')
    def test_submit_new_step_to_cluster(self, mock_get_boto_clients, mock_get_spark_conf, mock_get_cluster_id):
        # Mock environment variables
        os.environ["CONFIG_PATH"] = "s3://your-bucket/config/path"
        os.environ["SPARK_SCRIPT"] = "spark_script"
        os.environ["ENVIRONMENT"] = "env"
        os.environ["EDP_UTILS_PATH"] = "edp_utils_path"

        # Mock return values
        mock_get_cluster_id.return_value = "cluster_id"
        mock_get_spark_conf.return_value = ["conf1", "conf2"]
        
        emr_client = boto3.client('emr')
        mock_get_boto_clients.side_effect = lambda client_type: emr_client if client_type == "emr_client" else None
        
        with Stubber(emr_client) as stubber:
            response = {
                "StepIds": ["step_id"]
            }
            stubber.add_response('add_job_flow_steps', response)
            
            sre_run_id_dict = {"some_key": "some_value"}

            result = handler.submit_new_step_to_cluster('dataset_name', '2023-01-01', '1', sre_run_id_dict, 'cluster_name')

            self.assertEqual(result["StepIds"][0], "step_id")
            self.assertEqual(result["job_version"], '1')

    @patch('handler.get_cluster_id')
    @patch('handler.get_spark_conf')
    @patch('handler.get_boto_clients')
    def test_submit_new_step_to_cluster_no_cluster(self, mock_get_boto_clients, mock_get_spark_conf, mock_get_cluster_id):
        # Mock return value to simulate no active cluster
        mock_get_cluster_id.return_value = None
        
        sre_run_id_dict = {"some_key": "some_value"}

        result = handler.submit_new_step_to_cluster('dataset_name', '2023-01-01', '1', sre_run_id_dict, 'cluster_name')

        self.assertEqual(result, -1)


if __name__ == '__main__':
    unittest.main()
